Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/07/16 12:23:13
Connect Four Assembler Cod				     Page 1 - 1


				TITLE Connect Four Assembler Code
				
				;Program Description: Functions written in assembler that will be linked to our C++ main function
				;Author:			Kathleen, Andrew, Ryan, Jusice
				;Creation Date:               12/01/2016
				;Latest Revision:			  12/07/2016
				 
				; 32-bit assembly language template
				
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				
				;----------------------------DATA----------------------------------------
 00000000			.data
				
 00000000 50 6C 61 79 65	p1Prompt BYTE "Player 1: what is your name? ",0
	   72 20 31 3A 20
	   77 68 61 74 20
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000001E 50 6C 61 79 65	p2Prompt BYTE "Player 2: what is your name? ",0
	   72 20 32 3A 20
	   77 68 61 74 20
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000003C  00000050 [		p1Name DWORD 80 DUP(0)
	    00000000
	   ]
 0000017C  00000050 [		p2Name DWORD 80 DUP(0)
	    00000000
	   ]
				
 000002BC 01			MM BYTE 1
 000002BD 4D 41 49 4E 20	MMtitle BYTE "MAIN MENU",0
	   4D 45 4E 55 00
 000002C7 31 29 20 50 6C	MMplay BYTE "1) Play game",0
	   61 79 20 67 61
	   6D 65 00
 000002D4 32 29 20 49 6E	MMinstructions BYTE "2) Instructions",0
	   73 74 72 75 63
	   74 69 6F 6E 73
	   00
 000002E4 33 29 20 53 65	MMstats BYTE "3) See stats",0
	   65 20 73 74 61
	   74 73 00
 000002F1 34 29 20 45 78	MMexit BYTE "4) Exit",0
	   69 74 00
 000002F9 50 6C 65 61 73	MMprompt BYTE "Please chose a valid value from the main menu (1-4)",0
	   65 20 63 68 6F
	   73 65 20 61 20
	   76 61 6C 69 64
	   20 76 61 6C 75
	   65 20 66 72 6F
	   6D 20 74 68 65
	   20 6D 61 69 6E
	   20 6D 65 6E 75
	   20 28 31 2D 34
	   29 00
 0000032D 4E 6F 74 20 61	MMinvalid BYTE "Not a valid option, please enter a value 1 - 4",0
	   20 76 61 6C 69
	   64 20 6F 70 74
	   69 6F 6E 2C 20
	   70 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 75 65
	   20 31 20 2D 20
	   34 00
 0000035C 42 65 20 74 68	instruct BYTE "Be the first to place 4 tiles in a row! Switch off between player 1 and 2 until someone wins or the board fills up.",0
	   65 20 66 69 72
	   73 74 20 74 6F
	   20 70 6C 61 63
	   65 20 34 20 74
	   69 6C 65 73 20
	   69 6E 20 61 20
	   72 6F 77 21 20
	   53 77 69 74 63
	   68 20 6F 66 66
	   20 62 65 74 77
	   65 65 6E 20 70
	   6C 61 79 65 72
	   20 31 20 61 6E
	   64 20 32 20 75
	   6E 74 69 6C 20
	   73 6F 6D 65 6F
	   6E 65 20 77 69
	   6E 73 20 6F 72
	   20 74 68 65 20
	   62 6F 61 72 64
	   20 66 69 6C 6C
	   73 20 75 70 2E
	   00
 000003D0 49 4E 53 54 52	instructionsTitle BYTE "INSTRUCTIONS",0
	   55 43 54 49 4F
	   4E 53 00
				
 000003DD 50 72 65 73 73	anyKey BYTE "Press any key to continue...",0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 00
				
 000003FA  0000002A [		board DWORD 42 DUP (?)	;allocates space for a 6x7 board
	    00000000
	   ]
 000004A2 00000000		i DWORD 0
 000004A6 00000020		blank DWORD " ",0
	   00000000
 000004AE 01			inarow BYTE 1
 000004AF 00			row BYTE ?
 000004B0 00			col BYTE ?
 000004B1 00000007		seven DWORD 7
 000004B5 00000000		validPlace DWORD ?
				
 000004B9 00000000		colChoice DWORD 0
 000004BD 00000000		curCol DWORD 0
 000004C1 00000000		placed DWORD 0
 000004C5 2C 20 77 68 65	tileDropPrompt BYTE ", where would you like to drop your tile? (Choose columns 1 - 7)",0
	   72 65 20 77 6F
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 64 72 6F 70
	   20 79 6F 75 72
	   20 74 69 6C 65
	   3F 20 28 43 68
	   6F 6F 73 65 20
	   63 6F 6C 75 6D
	   6E 73 20 31 20
	   2D 20 37 29 00
 00000506 43 6F 6C 75 6D	invalidCol BYTE "Column is full, please choose a different column"
	   6E 20 69 73 20
	   66 75 6C 6C 2C
	   20 70 6C 65 61
	   73 65 20 63 68
	   6F 6F 73 65 20
	   61 20 64 69 66
	   66 65 72 65 6E
	   74 20 63 6F 6C
	   75 6D 6E
 00000536 50 6C 65 61 73	invalidB BYTE "Please enter a value between 1 and 7: "
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 75 65
	   20 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   37 3A 20
				
 0000055C 30			win BYTE 48			;win is going to be a kind of boolean set to either 1 or 0 in ascii
 0000055D 0000000F		player DWORD 15		;player 1 is 15, player 2 is 254 (both ascii characters)
 00000561 20 77 6F 6E 21	winnerTxt BYTE " won!",0
	   00
 00000567 49 74 27 73 20	drawTxt BYTE "It's a draw!",0
	   61 20 64 72 61
	   77 21 00
				
 00000574 20 73 63 6F 72	scorePrompt BYTE " score is ",0
	   65 20 69 73 20
	   00
 0000057F 00000000		p1Score DWORD 0		;holds scores of player 1
 00000583 00000000		p2Score DWORD 0		;holds scores of player 2
 00000587 31			againUser BYTE 49	;againUser is a aboolean that is either 1 or 0 in ascii
 00000588 57 6F 75 6C 64	playAgain BYTE "Would you like to play again? Enter 1 for yes and 0 for no: ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 3F 20
	   45 6E 74 65 72
	   20 31 20 66 6F
	   72 20 79 65 73
	   20 61 6E 64 20
	   30 20 66 6F 72
	   20 6E 6F 3A 20
	   00
 000005C5 54 68 61 6E 6B	endGameMsg BYTE "Thank you for playing connect four, come back soon!",0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 63 6F 6E
	   6E 65 63 74 20
	   66 6F 75 72 2C
	   20 63 6F 6D 65
	   20 62 61 63 6B
	   20 73 6F 6F 6E
	   21 00
				
				;-------------------------------MAIN FUNCTION------------------------------------- 
 00000000			.code
 00000000			main proc
 00000000  E8 0000008D			call askName				;ask users names at beginning and then not again while program is running
				
 00000005			BeginGame:
 00000005  E8 000000CB			call mainMenu				;display main menu
				
 0000000A  80 3D 000002BC R		cmp MM, 49					;if MM == 1 play the game
	   31
 00000011  74 35				je Play
 00000013  80 3D 000002BC R		cmp	MM, 52					;if MM == 4 end the game
	   34
 0000001A  74 4E				je EndGame	
 0000001C  80 3D 000002BC R		cmp MM, 50					;if MM == 2 give instructions and jmp to beginning 
	   32
 00000023  75 07				jne Next
 00000025  E8 0000011B				call instructions
 0000002A  EB D9				jmp BeginGame
 0000002C				Next:
 0000002C  80 3D 000002BC R		cmp MM, 51					;if MM == 3 display stats and jmp to beginning 
	   33
 00000033  75 07				jne Next1
 00000035  E8 00000147				call displayStats
 0000003A  EB C9				jmp BeginGame
 0000003C				Next1:
 0000003C  BA 0000032D R			mov edx, offset MMinvalid		;if none of the above are called, then display invalidMM and jmp to beginning 
 00000041  E8 00000000 E			call WriteString
 00000046  EB BD			jmp BeginGame				
					
				
 00000048			Play:
 00000048  E8 00000193			call playGame
					
 0000004D  B8 0000000F			mov eax, white+(black*16)			;reset screen colors to out of game mode
 00000052  E8 00000000 E		call settextcolor
 00000057  E8 00000000 E		call Clrscr
				
 0000005C  E8 000006E6			call again						;sees if the user wants to play again
 00000061  80 3D 00000587 R		cmp againUser, 49
	   31
 00000068  74 9B			je BeginGame					;if yes, start the game over, if no then continue and thank the user for playing
 0000006A			EndGame:
 0000006A  E8 00000000 E		call Clrscr
 0000006F  BA 000005C5 R		mov edx, offset endGameMsg		;ends program and thanks user for playing
 00000074  E8 00000000 E		call WriteString
 00000079  E8 00000000 E		call Crlf
 0000007E  BA 000003DD R		mov edx, offset anyKey
 00000083  E8 00000000 E		call WriteString
 00000088  E8 00000000 E		call ReadChar
 0000008D  E8 00000000 E		call exitProcess
 00000092			main endp
				
				;---------------------------------FUNCTION TO ASK USER NAME-----------------------------------
 00000092			askName PROC USES EAX EDX ECX
 00000092  50		   *	    push   eax
 00000093  52		   *	    push   edx
 00000094  51		   *	    push   ecx
 00000095  BA 00000000 R		mov edx, offset p1Prompt		;asks P1 name
 0000009A  E8 00000000 E		call WriteString
 0000009F  B9 00000050			mov ecx, 80
 000000A4  BA 0000003C R		mov edx, offset p1Name			;reads P1 name
 000000A9  E8 00000000 E		call ReadString
 000000AE  E8 00000000 E		call Crlf
				
 000000B3  BA 0000001E R		mov edx, offset p2Prompt		;asks P2 name
 000000B8  E8 00000000 E		call Writestring
 000000BD  B9 00000050			mov ecx, 80
 000000C2  BA 0000017C R		mov edx, offset p2Name			;reads P2 name
 000000C7  E8 00000000 E		call ReadString
 000000CC  E8 00000000 E		call Clrscr
				
					ret
 000000D1  59		   *	    pop    ecx
 000000D2  5A		   *	    pop    edx
 000000D3  58		   *	    pop    eax
 000000D4  C3		   *	    ret    00000h
 000000D5			askName endp
				
				;---------------------------------FUNCTION TO DISPLAY MAIN MENU-----------------------------------
 000000D5			mainMenu PROC USES EDX EAX
 000000D5  52		   *	    push   edx
 000000D6  50		   *	    push   eax
 000000D7  E8 00000000 E		call Clrscr
 000000DC  BA 000002BD R		mov edx, offset MMtitle			;title
 000000E1  E8 00000000 E		call WriteString
 000000E6  E8 00000000 E		call Crlf
 000000EB  BA 000002C7 R		mov edx, offset MMplay			;play
 000000F0  E8 00000000 E		call WriteString
 000000F5  E8 00000000 E		call Crlf
 000000FA  BA 000002D4 R		mov edx, offset MMinstructions	;instructions
 000000FF  E8 00000000 E		call WriteString
 00000104  E8 00000000 E		call Crlf
 00000109  BA 000002E4 R		mov edx, offset MMstats			;stats
 0000010E  E8 00000000 E		call WriteString
 00000113  E8 00000000 E		call Crlf
 00000118  BA 000002F1 R		mov edx, offset MMexit			;exit
 0000011D  E8 00000000 E		call WriteString
 00000122  E8 00000000 E		call Crlf
 00000127  E8 00000000 E		call Crlf
 0000012C  BA 000002F9 R		mov edx, offset MMprompt		;prompt
 00000131  E8 00000000 E		call WriteString
				
 00000136  33 C0			xor eax, eax
 00000138  E8 00000000 E		call ReadChar
 0000013D  A2 000002BC R		mov MM, al
				
					ret
 00000142  58		   *	    pop    eax
 00000143  5A		   *	    pop    edx
 00000144  C3		   *	    ret    00000h
 00000145			mainMenu endp
				
				;---------------------------------FUNCTION FOR INSTRUCTIONS-----------------------------------
 00000145			instructions PROC USES EDX EAX
 00000145  52		   *	    push   edx
 00000146  50		   *	    push   eax
 00000147  E8 00000000 E		call Clrscr
 0000014C  BA 000003D0 R		mov edx, offset instructionsTitle		;display instruction title
 00000151  E8 00000000 E		call WriteString
 00000156  E8 00000000 E		call Crlf
					
 0000015B  BA 0000035C R		mov edx, offset instruct				;display instructions
 00000160  E8 00000000 E		call WriteString
 00000165  E8 00000000 E		call Crlf
 0000016A  E8 00000000 E		call Crlf
					
 0000016F  BA 000003DD R		mov edx, offset anyKey
 00000174  E8 00000000 E		call WriteString
 00000179  E8 00000000 E		call ReadChar
				
					ret
 0000017E  58		   *	    pop    eax
 0000017F  5A		   *	    pop    edx
 00000180  C3		   *	    ret    00000h
 00000181			instructions endp
				
				;---------------------------------FUNCTION TO DISPLAY STATS-----------------------------------
 00000181			displayStats PROC USES EDX EAX	
 00000181  52		   *	    push   edx
 00000182  50		   *	    push   eax
 00000183  E8 00000000 E		call Clrscr
				
 00000188  BA 0000003C R		mov edx, offset p1Name			;name of player --> scorePrompt --> score
 0000018D  E8 00000000 E		call WriteString
 00000192  BA 00000574 R		mov edx, offset scorePrompt
 00000197  E8 00000000 E		call WriteString
 0000019C  A1 0000057F R		mov eax, p1Score
 000001A1  E8 00000000 E		call WriteInt
 000001A6  E8 00000000 E		call Crlf
				
 000001AB  BA 0000017C R		mov edx, offset p2Name
 000001B0  E8 00000000 E		call WriteString
 000001B5  BA 00000574 R		mov edx, offset scorePrompt
 000001BA  E8 00000000 E		call WriteString
 000001BF  A1 00000583 R		mov eax, p2Score
 000001C4  E8 00000000 E		call WriteInt
 000001C9  E8 00000000 E		call Crlf
				
 000001CE  BA 000003DD R		mov edx, offset anyKey
 000001D3  E8 00000000 E		call WriteString
 000001D8  E8 00000000 E		call ReadChar
				
				    ret
 000001DD  58		   *	    pop    eax
 000001DE  5A		   *	    pop    edx
 000001DF  C3		   *	    ret    00000h
 000001E0			displayStats endp
				
				;---------------------------------FUNCTION TO PLAY GAME-----------------------------------
 000001E0			playGame PROC USES EDX
 000001E0  52		   *	    push   edx
 000001E1  E8 00000000 E		call Clrscr
 000001E6  E8 000000FA			call emptyBoard
 000001EB  E8 00000116			call displayBoard
 000001F0			Game:
 000001F0  83 3D 000004BD R		cmp curCol, -1
	   FF
 000001F7  74 47			je ChooseRow
 000001F9  83 3D 0000055D R			cmp player, 15
	   0F
 00000200  75 20				jne elseP2
 00000202  BA 0000003C R				mov edx, offset p1Name
 00000207  E8 00000000 E				call WriteString
 0000020C  BA 000004C5 R				mov edx, offset tileDropPrompt
 00000211  E8 00000000 E				call WriteString
 00000216  C7 05 0000055D R				mov player, 254
	   000000FE
 00000220  EB 1E					jmp ChooseRow
 00000222					elseP2:
 00000222  BA 0000017C R				mov edx, offset p2Name
 00000227  E8 00000000 E				call WriteString
 0000022C  BA 000004C5 R				mov edx, offset tileDropPrompt
 00000231  E8 00000000 E				call WriteString
 00000236  C7 05 0000055D R				mov player, 15
	   0000000F
 00000240				ChooseRow:
 00000240  83 3D 000004C1 R			cmp placed, 42		;if board is full then game over
	   2A
 00000247  74 2E				je Place
 00000249  E8 00000000 E				call ReadChar	;otherwise read in char from user
 0000024E  A3 000004B9 R				mov colChoice, eax	
 00000253  FF 0D 000004B9 R				dec colChoice
 00000259  83 3D 000004B9 R				cmp colChoice, 7	;ensure row choice is valid
	   07
 00000260  72 15					jb Place
 00000262  83 3D 000004B9 R				cmp colChoice, 0
	   00
 00000269  73 0C					jae Place
 0000026B  BA 00000536 R					mov edx, offset invalidB
 00000270  E8 00000000 E					call WriteString
 00000275  EB C9			jmp ChooseRow		;while (true)
 00000277				Place:
 00000277  83 3D 000004C1 R		cmp placed, 42		;if the board is full game over
	   2A
 0000027E  74 45				je GameOver
 00000280  E8 0000014C				call placeTile	;otherwise call placeTile to set curCol
 00000285  83 3D 000004BD R		cmp curCol, -1
	   FF
 0000028C  75 0C				jne checkWin		;if curCol is -1 then the column is full
 0000028E  BA 00000506 R			mov edx, offset invalidCol
 00000293  E8 00000000 E			call WriteString
 00000298  EB A6				jmp ChooseRow
 0000029A				checkWin:				;otherwise check for a win
 0000029A  83 3D 000004C1 R			cmp placed, 6
	   06
 000002A1  72 05				jb Enough
 000002A3  E8 00000174					call check		;check for a win and change the value of win if someone won to exit loop
 000002A8					Enough:
 000002A8  FF 05 000004C1 R			inc placed
 000002AE  E8 00000000 E			call Clrscr
 000002B3  E8 0000004E				call displayBoard
 000002B8  80 3D 0000055C R	cmp win, 48
	   30
 000002BF  0F 84 FFFFFF2B	je Game						;WILL THIS JUMP TO THE TOP?
				
 000002C5			GameOver:
 000002C5  E8 00000000 E		call Clrscr
 000002CA  E8 00000037			call displayBoard
 000002CF  E8 0000040D			call updateStats			;announces winner and updates scores
 000002D4  BA 000003DD R		mov edx, offset anyKey		;similar to system("pause") in c++
 000002D9  E8 00000000 E		call WriteString
 000002DE  E8 00000000 E		call ReadChar
				
					ret
 000002E3  5A		   *	    pop    edx
 000002E4  C3		   *	    ret    00000h
 000002E5			playGame endp
				
				;-------------------------------FUNCTION TO EMPTY BOARD-------------------------------------
 000002E5			emptyBoard PROC USES ECX EAX EBX ESI					
 000002E5  51		   *	    push   ecx
 000002E6  50		   *	    push   eax
 000002E7  53		   *	    push   ebx
 000002E8  56		   *	    push   esi
 000002E9  BE 000003FA R		mov esi, offset board
 000002EE  8B 1D 000004A6 R		mov ebx, blank
 000002F4  33 C0			xor eax, eax
 000002F6  B9 0000002A		   	mov ecx, 42
 000002FB			    Loop1:
 000002FB  89 1C 86				mov [esi + eax * 4], ebx
 000002FE  40					inc eax
 000002FF  E2 FA			loop Loop1

					ret
 00000301  5E		   *	    pop    esi
 00000302  5B		   *	    pop    ebx
 00000303  58		   *	    pop    eax
 00000304  59		   *	    pop    ecx
 00000305  C3		   *	    ret    00000h
 00000306			emptyBoard endp
				
				;---------------------------------FUNCTION TO DISPLAY BOARD----------------------------------- 
 00000306			displayBoard PROC USES EAX ECX
 00000306  50		   *	    push   eax
 00000307  51		   *	    push   ecx
 00000308  B8 0000001F			mov eax, white+(blue*16)
 0000030D  E8 00000000 E		call settextcolor
 00000312  E8 00000000 E		call Clrscr
				 
 00000317  B9 00000006			mov ecx, 6
 0000031C  C7 05 000004A2 R		mov i, 6
	   00000006
 00000326				Loop4:
 00000326  E8 0000000B				call setRow
 0000032B  FF 0D 000004A2 R			dec i
 00000331  E2 F3			loop Loop4 
					ret
 00000333  59		   *	    pop    ecx
 00000334  58		   *	    pop    eax
 00000335  C3		   *	    ret    00000h
 00000336			displayBoard endp
				
				;-------------------------------FUNCTION TO CREATE A ROW OF THE BOARD-------------------------------------
 00000336			setRow PROC USES EAX ECX           ;outputs a row of boxes using ascii characters
 00000336  50		   *	    push   eax
 00000337  51		   *	    push   ecx
 00000338  B9 00000007			mov ecx, 7
 0000033D				Loop1:                                          ;ouputs first third of a row of 7 boxes
 0000033D  B0 DA				mov al, 218
 0000033F  E8 00000000 E			call Writechar
 00000344  B0 C4				mov al, 196
 00000346  E8 00000000 E			call Writechar
 0000034B  B0 BF				mov al, 191
 0000034D  E8 00000000 E			call Writechar
 00000352  A0 000004A6 R			mov al, BYTE PTR blank
 00000357  E8 00000000 E			call Writechar
 0000035C  E2 DF			loop Loop1
 0000035E  E8 00000000 E		call crlf
				 
 00000363  B9 00000007			mov ecx, 7
 00000368				Loop2:                                          ;ouputs second third of a row of 7 boxes
 00000368  B0 B3				mov al, 179
 0000036A  E8 00000000 E			call Writechar
 0000036F  BE 000003FA R			mov esi, offset board
 00000374  A1 000004A2 R			mov eax, i
 00000379  F7 25 000004B1 R			mul seven
 0000037F  51					push ecx
 00000380  03 C8				add ecx, eax
 00000382  8A 04 31				mov al, BYTE PTR [esi + ecx]			;(board[curCol(j) + curRow(i) * 7]) i = ecx of first loop, j = ecx of second loop
 00000385  E8 00000000 E			call Writechar
 0000038A  59					pop ecx
 0000038B  B0 B3				mov al, 179
 0000038D  E8 00000000 E			call Writechar
 00000392  A0 000004A6 R			mov al, BYTE PTR blank
 00000397  E8 00000000 E			call Writechar
 0000039C  E2 CA			loop Loop2
 0000039E  E8 00000000 E		call crlf
				 
 000003A3  B9 00000007			mov ecx, 7
 000003A8				Loop3:                                          ;ouputs last third of a row of 7 boxes
 000003A8  B0 C0				mov al, 192
 000003AA  E8 00000000 E			call Writechar
 000003AF  B0 C4				mov al, 196
 000003B1  E8 00000000 E			call Writechar
 000003B6  B0 D9				mov al, 217
 000003B8  E8 00000000 E			call Writechar
 000003BD  A0 000004A6 R			mov al, BYTE PTR blank
 000003C2  E8 00000000 E			call Writechar
 000003C7  E2 DF			loop Loop3
 000003C9  E8 00000000 E		call crlf
					ret
 000003CE  59		   *	    pop    ecx
 000003CF  58		   *	    pop    eax
 000003D0  C3		   *	    ret    00000h
 000003D1			setRow endp
				
				;--------------------------------FUNCTION TO PLACE TILE------------------------------------
 000003D1			placeTile PROC
						;get column
 000003D1  C6 05 000004AF R			mov row, 5
	   05
						
						

						.WHILE row >= 0
 000003D8  EB 18	   *	    jmp    @C0001
 000003DA		   *@C0002:
							
							.IF	board[colChoice + row * 7] == " "	;check to see if spot is not filled
ConnectFour.asm(356) : error A2026:constant expected
			   *	    cmp    
 000003DA  75 10	   *	    jne    @C0003
 000003DC  EB 28						jmp placedTile			;jmp to function to place the tile 
							.ENDIF
						
 000003EC		   *@C0003:
 000003EC  FE 0D 000004AF R				dec row
						.ENDW
 000003F2		   *@C0001:
 000003F2  80 3D 000004AF R
	   00		   *	    cmp    row, 000h
 000003F9  73 DF	   *	    jae    @C0002
						
 000003FB  C7 05 000004B5 R			mov validPlace, -1  	;set -1 if not a valid option(column is full)
	   FFFFFFFF
 00000405  C3					ret				

 00000406					placedTile:
							mov board[colChoice + row * 7], player	;drop player tile into column 
ConnectFour.asm(367) : error A2026:constant expected
 00000406  C7 05 000004B5 R				mov validPlace, 1			;set 1 tile has been placed
	   00000001
 00000410  C3						ret
								
 00000411			placeTile endp
				
				;---------------------------------FUNCTION TO CHECK FOR A WINNER-----------------------------------
 00000411			check PROC 
				;set win as the "return value" of check() and whatever ends up returning will return the value in curCol
 00000411  A0 000004B9 R		mov al, BYTE PTR colChoice
 00000416  A2 000004B0 R		mov col,al
 0000041B  A0 000004BD R		mov al, BYTE PTR curCol
 00000420  A2 000004AF R		mov row,al
				
					;check horizontal
					;go left
					.WHILE col > 0
 00000425  EB 3C	   *	    jmp    @C0006
 00000432		   *@C0007:
						.IF board[colChoice + curCol*7] == board[(col-1) + row*7]
ConnectFour.asm(384) : error A2026:constant expected
			   *	    cmp    
 00000432  75 27	   *	    jne    @C0008
 00000434  FE 05 000004AE R				inc inarow
							.IF inarow == 4
 0000043A  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 00000441  75 1A	   *	    jne    @C000A
 00000443  C6 05 0000055C R					mov win,49
	   31
 0000044A  C3							ret
							.ENDIF
						.ELSE
 0000044B  EB 10	   *	    jmp    @C000C
 0000045B		   *@C0008:
 0000045B  EB 0F					jmp next1
						.ENDIF
 0000045D		   *@C000C:
 0000045D		   *@C000A:
 0000045D  FE 0D 000004B0 R			dec col
					.ENDW
 00000463		   *@C0006:
 00000463  80 3D 000004B0 R
	   00		   *	    cmp    col, 000h
 0000046A  77 C6	   *	    ja	@C0007
 0000046C				next1:
 0000046C  A0 000004B9 R		mov al, BYTE PTR colChoice
 00000471  A2 000004B0 R		mov col,al
				
					;go right
					.WHILE col < 6
 00000476  EB 31	   *	    jmp    @C000E
 00000478		   *@C000F:
						.IF board[colChoice + curCol*7] == board[(col+1) + row*7]
ConnectFour.asm(401) : error A2026:constant expected
			   *	    cmp    
 00000478  75 27	   *	    jne    @C0010
 0000047A  FE 05 000004AE R				inc inarow
							.IF inarow == 4
 00000480  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 00000487  75 1A	   *	    jne    @C0012
 00000489  C6 05 0000055C R					mov win,49
	   31
 00000490  C3							ret
							.ENDIF
						.ELSE
 00000491  EB 10	   *	    jmp    @C0014
 000004A1		   *@C0010:
 000004A1  EB 0F					jmp next2
						.ENDIF
 000004A3		   *@C0014:
 000004A3		   *@C0012:
 000004A3  FE 05 000004B0 R			inc col
					.ENDW
 000004A9		   *@C000E:
 000004A9  80 3D 000004B0 R
	   06		   *	    cmp    col, 006h
 000004B0  72 C6	   *	    jb	@C000F
 000004B2				next2:
 000004B2  C6 05 000004AE R		mov inarow,1
	   01
 000004B9  A0 000004B9 R		mov al, BYTE PTR colChoice
 000004BE  A2 000004B0 R		mov col,al
				
					;check vertical
					;go up
					.WHILE row > 0
 000004C3  EB 31	   *	    jmp    @C0016
 000004C5		   *@C0017:
						.IF board[colChoice + curCol*7] == board[col + (row-1)*7]
ConnectFour.asm(420) : error A2026:constant expected
			   *	    cmp    
 000004C5  75 27	   *	    jne    @C0018
 000004C7  FE 05 000004AE R				inc inarow
							.IF inarow ==4
 000004CD  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 000004D4  75 1A	   *	    jne    @C001A
 000004D6  C6 05 0000055C R					mov win,49
	   31
 000004DD  C3							ret
							.ENDIF
						.ELSE
 000004DE  EB 10	   *	    jmp    @C001C
 000004EE		   *@C0018:
 000004EE  EB 0F					jmp next3
						.ENDIF
 000004F0		   *@C001C:
 000004F0		   *@C001A:
 000004F0  FE 0D 000004AF R			dec row
					.ENDW
 000004F6		   *@C0016:
 000004F6  80 3D 000004AF R
	   00		   *	    cmp    row, 000h
 000004FD  77 C6	   *	    ja	@C0017
 000004FF				next3:
 000004FF  A0 000004BD R		mov al, BYTE PTR curCol
 00000504  A2 000004AF R		mov row,al
				
					;go down
					.WHILE row < 5
 00000509  EB 31	   *	    jmp    @C001E
 0000050B		   *@C001F:
						.IF board[colChoice + curCol*7] == board[col + (row+1)*7]
ConnectFour.asm(437) : error A2026:constant expected
			   *	    cmp    
 0000050B  75 27	   *	    jne    @C0020
 0000050D  FE 05 000004AE R				inc inarow
							.IF inarow ==4
 00000513  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 0000051A  75 1A	   *	    jne    @C0022
 0000051C  C6 05 0000055C R					mov win,49
	   31
 00000523  C3							ret
							.ENDIF
						.ELSE
 00000524  EB 10	   *	    jmp    @C0024
 00000534		   *@C0020:
 00000534  EB 0F					jmp next4
						.ENDIF
 00000536		   *@C0024:
 00000536		   *@C0022:
 00000536  FE 05 000004AF R			inc row
					.ENDW
 0000053C		   *@C001E:
 0000053C  80 3D 000004AF R
	   05		   *	    cmp    row, 005h
 00000543  72 C6	   *	    jb	@C001F
 00000545				next4:
 00000545  C6 05 000004AE R		mov inarow,1
	   01
 0000054C  A0 000004BD R		mov al, BYTE PTR curCol
 00000551  A2 000004AF R		mov row,al
				
					;check diagonally (/)
					;go up-right
					.WHILE col < 6 && row >0
 00000556  EB 37	   *	    jmp    @C0026
 00000558		   *@C0027:
						.IF board[colChoice + curCol*7] == board[(col + 1) + (row - 1)*7]
ConnectFour.asm(456) : error A2026:constant expected
			   *	    cmp    
 00000558  75 27	   *	    jne    @C0028
 0000055A  FE 05 000004AE R				inc inarow
							.IF inarow == 4
 00000560  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 00000567  75 1A	   *	    jne    @C002A
 00000569  C6 05 0000055C R					mov win,49
	   31
 00000570  C3							ret
							.ENDIF
						.ELSE
 00000571  EB 10	   *	    jmp    @C002C
 00000581		   *@C0028:
 00000581  EB 1E					jmp next5
						.ENDIF
 00000583		   *@C002C:
 00000583		   *@C002A:
 00000583  FE 0D 000004AF R			dec row
 00000589  FE 05 000004B0 R			inc col
					.ENDW
 0000058F		   *@C0026:
 0000058F  80 3D 000004B0 R
	   06		   *	    cmp    col, 006h
 00000596  73 09	   *	    jae    @C002D
 00000598  80 3D 000004AF R
	   00		   *	    cmp    row, 000h
 0000059F  77 B7	   *	    ja	@C0027
 000005A1		   *@C002D:
 000005A1				next5:
 000005A1  A0 000004BD R		mov al, BYTE PTR curCol
 000005A6  A2 000004AF R		mov row,al
 000005AB  A0 000004B9 R		mov al,BYTE PTR colChoice
 000005B0  A2 000004B0 R		mov col,al
				
					;go down-left
					.WHILE col > 0 && row < 5
 000005B5  EB 37	   *	    jmp    @C002F
 000005B7		   *@C0030:
						.IF board[colChoice + curCol*7] == board[(col-1) + (row+1)*7]
ConnectFour.asm(476) : error A2026:constant expected
			   *	    cmp    
 000005B7  75 27	   *	    jne    @C0031
 000005B9  FE 05 000004AE R				inc inarow
							.IF inarow ==4
 000005BF  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 000005C6  75 1A	   *	    jne    @C0033
 000005C8  C6 05 0000055C R					mov win,49
	   31
 000005CF  C3							ret
							.ENDIF
						.ELSE
 000005D0  EB 10	   *	    jmp    @C0035
 000005E0		   *@C0031:
 000005E0  EB 1E					jmp next6
						.ENDIF
 000005E2		   *@C0035:
 000005E2		   *@C0033:
 000005E2  FE 05 000004AF R			inc row
 000005E8  FE 0D 000004B0 R			dec col
					.ENDW
 000005EE		   *@C002F:
 000005EE  80 3D 000004B0 R
	   00		   *	    cmp    col, 000h
 000005F5  76 09	   *	    jbe    @C0036
 000005F7  80 3D 000004AF R
	   05		   *	    cmp    row, 005h
 000005FE  72 B7	   *	    jb	@C0030
 00000600		   *@C0036:
 00000600				next6:
 00000600  C6 05 000004AE R		mov inarow,1
	   01
 00000607  A0 000004BD R		mov al, BYTE PTR curCol
 0000060C  A2 000004AF R		mov row,al
 00000611  A0 000004B9 R		mov al, BYTE PTR colChoice
 00000616  A2 000004B0 R		mov col,al
				
					;check diagonally (\)
					;go up-left
					.WHILE col > 0 && row > 0
 0000061B  EB 37	   *	    jmp    @C0038
 0000061D		   *@C0039:
						.IF board[colChoice + curCol*7] == board[(col-1 + (row-1)*7]
ConnectFour.asm(498) : error A2026:constant expected
			   *	    cmp    
 0000061D  75 27	   *	    jne    @C003A
 0000061F  FE 05 000004AE R				inc inarow
							.IF inarow ==4
 00000625  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 0000062C  75 1A	   *	    jne    @C003C
 0000062E  C6 05 0000055C R					mov win,49
	   31
 00000635  C3							ret
							.ENDIF
						.ELSE
 00000636  EB 10	   *	    jmp    @C003E
 00000646		   *@C003A:
 00000646  EB 1E					jmp next7
						.ENDIF
 00000648		   *@C003E:
 00000648		   *@C003C:
 00000648  FE 0D 000004AF R			dec row
 0000064E  FE 0D 000004B0 R			dec col
					.ENDW
 00000654		   *@C0038:
 00000654  80 3D 000004B0 R
	   00		   *	    cmp    col, 000h
 0000065B  76 09	   *	    jbe    @C003F
 0000065D  80 3D 000004AF R
	   00		   *	    cmp    row, 000h
 00000664  77 B7	   *	    ja	@C0039
 00000666		   *@C003F:
 00000666				next7:
 00000666  A0 000004BD R		mov al, BYTE PTR curCol
 0000066B  A2 000004AF R		mov row,al
 00000670  A0 000004B9 R		mov al, BYTE PTR colChoice
 00000675  A2 000004B0 R		mov col,al
				
					;go down-right
					.WHILE col < 6 && row < 5
 0000067A  EB 37	   *	    jmp    @C0041
 0000067C		   *@C0042:
						.IF board[colChoice + curCol*7] == board[(col+1) + (row+1)*7]
ConnectFour.asm(518) : error A2026:constant expected
			   *	    cmp    
 0000067C  75 27	   *	    jne    @C0043
 0000067E  FE 05 000004AE R				inc inarow
							.IF inarow ==4
 00000684  80 3D 000004AE R
	   04		   *	    cmp    inarow, 004h
 0000068B  75 1A	   *	    jne    @C0045
 0000068D  C6 05 0000055C R					mov win,49
	   31
 00000694  C3							ret
							.ENDIF
						.ELSE
 00000695  EB 10	   *	    jmp    @C0047
 000006A5		   *@C0043:
 000006A5  EB 1E					jmp next8
						.ENDIF
 000006A7		   *@C0047:
 000006A7		   *@C0045:
 000006A7  FE 05 000004AF R			inc row
 000006AD  FE 05 000004B0 R			inc col
					.ENDW
 000006B3		   *@C0041:
 000006B3  80 3D 000004B0 R
	   06		   *	    cmp    col, 006h
 000006BA  73 09	   *	    jae    @C0048
 000006BC  80 3D 000004AF R
	   05		   *	    cmp    row, 005h
 000006C3  72 B7	   *	    jb	@C0042
 000006C5		   *@C0048:
 000006C5				next8:
 000006C5  C6 05 000004AE R		mov inarow,1
	   01
 000006CC  A0 000004BD R		mov al, BYTE PTR curCol
 000006D1  A2 000004AF R		mov row,al
 000006D6  A0 000004B9 R		mov al, BYTE PTR colChoice
 000006DB  A2 000004B0 R		mov col,al
 000006E0  C3			    ret
 000006E1			check endp
				
				;---------------------------------FUNCTION TO UPDATE STATS-----------------------------------
 000006E1			updateStats PROC
 000006E1  83 3D 000004C1 R		cmp placed, 42					;if the board is full then its a draw
	   2A
 000006E8  75 1B			jne Next
 000006EA  BA 00000567 R			mov edx, offset drawTxt		
 000006EF  E8 00000000 E			call Writestring
 000006F4  BA 000003DD R			mov edx, offset anyKey		;similar to system("pause") in c++
 000006F9  E8 00000000 E			call WriteString
 000006FE  E8 00000000 E			call ReadChar
 00000703  EB 41				jmp statEnd
 00000705			Next: 
 00000705  83 3D 0000055D R		cmp player, 15			;if player == 15 then player 2 won
	   0F
 0000070C  75 1D			jne IfElse
 0000070E  8B 15 0000017C R			mov edx, p2Name
 00000714  E8 00000000 E			call WriteString
 00000719  BA 00000561 R			mov edx, offset winnerTxt		
 0000071E  E8 00000000 E			call Writestring
 00000723  FF 05 0000057F R			inc p1Score
 00000729  EB 1B				jmp statEnd
 0000072B				IfElse:					;otherwise player 1 wins
 0000072B  8B 15 0000003C R			mov edx, p1Name
 00000731  E8 00000000 E			call WriteString
 00000736  BA 00000561 R			mov edx, offset winnerTxt		
 0000073B  E8 00000000 E			call Writestring
 00000740  FF 05 00000583 R			inc p2Score
 00000746			statEnd:
 00000746  C3			    ret
 00000747			updateStats endp
				
				;---------------------------------FUNCTION TO ASK USER IF THEY WANT TO PLAY AGAIN-----------------------------------
 00000747			again PROC USES ECX EDX EAX
 00000747  51		   *	    push   ecx
 00000748  52		   *	    push   edx
 00000749  50		   *	    push   eax
 0000074A  BA 00000588 R		mov edx, offset playAgain
 0000074F  E8 00000000 E		call WriteString
 00000754  33 C0			xor eax, eax
 00000756  E8 00000000 E		call ReadChar
 0000075B  A2 00000587 R		mov againUser, al
				
					ret
 00000760  58		   *	    pop    eax
 00000761  5A		   *	    pop    edx
 00000762  59		   *	    pop    ecx
 00000763  C3		   *	    ret    00000h
 00000764			again endp
				end main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/07/16 12:23:13
Connect Four Assembler Cod				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000005F9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000764 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
again  . . . . . . . . . . . . .	P Near	 00000747 _TEXT	Length= 0000001D Public STDCALL
askName  . . . . . . . . . . . .	P Near	 00000092 _TEXT	Length= 00000043 Public STDCALL
check  . . . . . . . . . . . . .	P Near	 0000041C _TEXT	Length= 000002C5 Public STDCALL
  next1  . . . . . . . . . . . .	L Near	 0000046C _TEXT	
  next2  . . . . . . . . . . . .	L Near	 000004B2 _TEXT	
  next3  . . . . . . . . . . . .	L Near	 000004FF _TEXT	
  next4  . . . . . . . . . . . .	L Near	 00000545 _TEXT	
  next5  . . . . . . . . . . . .	L Near	 000005A1 _TEXT	
  next6  . . . . . . . . . . . .	L Near	 00000600 _TEXT	
  next7  . . . . . . . . . . . .	L Near	 00000666 _TEXT	
  next8  . . . . . . . . . . . .	L Near	 000006C5 _TEXT	
displayBoard . . . . . . . . . .	P Near	 00000306 _TEXT	Length= 00000030 Public STDCALL
  Loop4  . . . . . . . . . . . .	L Near	 00000326 _TEXT	
displayStats . . . . . . . . . .	P Near	 00000181 _TEXT	Length= 0000005F Public STDCALL
emptyBoard . . . . . . . . . . .	P Near	 000002E5 _TEXT	Length= 00000021 Public STDCALL
  Loop1  . . . . . . . . . . . .	L Near	 000002FB _TEXT	
instructions . . . . . . . . . .	P Near	 00000145 _TEXT	Length= 0000003C Public STDCALL
mainMenu . . . . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000070 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000092 Public STDCALL
  BeginGame  . . . . . . . . . .	L Near	 00000005 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  Next1  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
  Play . . . . . . . . . . . . .	L Near	 00000048 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 0000006A _TEXT	
placeTile  . . . . . . . . . . .	P Near	 000003D1 _TEXT	Length= 0000004B Public STDCALL
  placedTile . . . . . . . . . .	L Near	 00000406 _TEXT	
playGame . . . . . . . . . . . .	P Near	 000001E0 _TEXT	Length= 00000105 Public STDCALL
  Game . . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  elseP2 . . . . . . . . . . . .	L Near	 00000222 _TEXT	
  ChooseRow  . . . . . . . . . .	L Near	 00000240 _TEXT	
  Place  . . . . . . . . . . . .	L Near	 00000277 _TEXT	
  checkWin . . . . . . . . . . .	L Near	 0000029A _TEXT	
  Enough . . . . . . . . . . . .	L Near	 000002A8 _TEXT	
  GameOver . . . . . . . . . . .	L Near	 000002C5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setRow . . . . . . . . . . . . .	P Near	 00000336 _TEXT	Length= 0000009B Public STDCALL
  Loop1  . . . . . . . . . . . .	L Near	 0000033D _TEXT	
  Loop2  . . . . . . . . . . . .	L Near	 00000368 _TEXT	
  Loop3  . . . . . . . . . . . .	L Near	 000003A8 _TEXT	
updateStats  . . . . . . . . . .	P Near	 000006E1 _TEXT	Length= 00000066 Public STDCALL
  Next . . . . . . . . . . . . .	L Near	 00000705 _TEXT	
  IfElse . . . . . . . . . . . .	L Near	 0000072B _TEXT	
  statEnd  . . . . . . . . . . .	L Near	 00000746 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MMexit . . . . . . . . . . . . .	Byte	 000002F1 _DATA	
MMinstructions . . . . . . . . .	Byte	 000002D4 _DATA	
MMinvalid  . . . . . . . . . . .	Byte	 0000032D _DATA	
MMplay . . . . . . . . . . . . .	Byte	 000002C7 _DATA	
MMprompt . . . . . . . . . . . .	Byte	 000002F9 _DATA	
MMstats  . . . . . . . . . . . .	Byte	 000002E4 _DATA	
MMtitle  . . . . . . . . . . . .	Byte	 000002BD _DATA	
MM . . . . . . . . . . . . . . .	Byte	 000002BC _DATA	
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
againUser  . . . . . . . . . . .	Byte	 00000587 _DATA	
anyKey . . . . . . . . . . . . .	Byte	 000003DD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	DWord	 000004A6 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	DWord	 000003FA _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
colChoice  . . . . . . . . . . .	DWord	 000004B9 _DATA	
col  . . . . . . . . . . . . . .	Byte	 000004B0 _DATA	
curCol . . . . . . . . . . . . .	DWord	 000004BD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
drawTxt  . . . . . . . . . . . .	Byte	 00000567 _DATA	
endGameMsg . . . . . . . . . . .	Byte	 000005C5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inarow . . . . . . . . . . . . .	Byte	 000004AE _DATA	
instructionsTitle  . . . . . . .	Byte	 000003D0 _DATA	
instruct . . . . . . . . . . . .	Byte	 0000035C _DATA	
invalidB . . . . . . . . . . . .	Byte	 00000536 _DATA	
invalidCol . . . . . . . . . . .	Byte	 00000506 _DATA	
i  . . . . . . . . . . . . . . .	DWord	 000004A2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
p1Name . . . . . . . . . . . . .	DWord	 0000003C _DATA	
p1Prompt . . . . . . . . . . . .	Byte	 00000000 _DATA	
p1Score  . . . . . . . . . . . .	DWord	 0000057F _DATA	
p2Name . . . . . . . . . . . . .	DWord	 0000017C _DATA	
p2Prompt . . . . . . . . . . . .	Byte	 0000001E _DATA	
p2Score  . . . . . . . . . . . .	DWord	 00000583 _DATA	
placed . . . . . . . . . . . . .	DWord	 000004C1 _DATA	
playAgain  . . . . . . . . . . .	Byte	 00000588 _DATA	
player . . . . . . . . . . . . .	DWord	 0000055D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 000004AF _DATA	
scorePrompt  . . . . . . . . . .	Byte	 00000574 _DATA	
seven  . . . . . . . . . . . . .	DWord	 000004B1 _DATA	
tileDropPrompt . . . . . . . . .	Byte	 000004C5 _DATA	
validPlace . . . . . . . . . . .	DWord	 000004B5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winnerTxt  . . . . . . . . . . .	Byte	 00000561 _DATA	
win  . . . . . . . . . . . . . .	Byte	 0000055C _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   10 Errors
