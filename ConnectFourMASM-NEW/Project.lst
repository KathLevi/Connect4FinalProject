Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/12/16 22:08:21
Connect Four Assembler Cod				     Page 1 - 1


				TITLE Connect Four Assembler Code

				;Program Description: Connect Four written entirely in assembler, algorithms and all
				;Author:			Kathleen, Andrew, Ryan, Jusice
				;Creation Date:               12/01/2016
				;Latest Revision:			  12/12/2016
				 
				; 32-bit assembly language template

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;----------------------------DATA----------------------------------------
 00000000			.data

 00000000 50 6C 61 79 65	p1Prompt BYTE "Player 1: what is your name? ",0		;ask players names
	   72 20 31 3A 20
	   77 68 61 74 20
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000001E 50 6C 61 79 65	p2Prompt BYTE "Player 2: what is your name? ",0
	   72 20 32 3A 20
	   77 68 61 74 20
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000003C  00000050 [		p1Name DWORD 80 DUP(0)					;holds player names
	    00000000
	   ]
 0000017C  00000050 [		p2Name DWORD 80 DUP(0)
	    00000000
	   ]

 000002BC 01			MM BYTE 1								;main menu user input
 000002BD 4D 41 49 4E 20	MMtitle BYTE "MAIN MENU",0				;main menu prompts and options
	   4D 45 4E 55 00
 000002C7 31 29 20 50 6C	MMplay BYTE "1) Play game",0
	   61 79 20 67 61
	   6D 65 00
 000002D4 32 29 20 49 6E	MMinstructions BYTE "2) Instructions",0
	   73 74 72 75 63
	   74 69 6F 6E 73
	   00
 000002E4 33 29 20 53 65	MMstats BYTE "3) See stats",0
	   65 20 73 74 61
	   74 73 00
 000002F1 34 29 20 45 78	MMexit BYTE "4) Exit",0
	   69 74 00
 000002F9 50 6C 65 61 73	MMprompt BYTE "Please chose a valid value from the main menu (1-4)",0
	   65 20 63 68 6F
	   73 65 20 61 20
	   76 61 6C 69 64
	   20 76 61 6C 75
	   65 20 66 72 6F
	   6D 20 74 68 65
	   20 6D 61 69 6E
	   20 6D 65 6E 75
	   20 28 31 2D 34
	   29 00
 0000032D 4E 6F 74 20 61	MMinvalid BYTE "Not a valid option, please enter a value 1 - 4",0		;if user chooses invalid menu input ask to try again
	   20 76 61 6C 69
	   64 20 6F 70 74
	   69 6F 6E 2C 20
	   70 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 75 65
	   20 31 20 2D 20
	   34 00
 0000035C 42 65 20 74 68	instruct BYTE "Be the first to place 4 tiles in a row! Switch off between player 1 and 2 until someone wins or the board fills up.",0
	   65 20 66 69 72
	   73 74 20 74 6F
	   20 70 6C 61 63
	   65 20 34 20 74
	   69 6C 65 73 20
	   69 6E 20 61 20
	   72 6F 77 21 20
	   53 77 69 74 63
	   68 20 6F 66 66
	   20 62 65 74 77
	   65 65 6E 20 70
	   6C 61 79 65 72
	   20 31 20 61 6E
	   64 20 32 20 75
	   6E 74 69 6C 20
	   73 6F 6D 65 6F
	   6E 65 20 77 69
	   6E 73 20 6F 72
	   20 74 68 65 20
	   62 6F 61 72 64
	   20 66 69 6C 6C
	   73 20 75 70 2E
	   00
 000003D0 49 4E 53 54 52	instructionsTitle BYTE "INSTRUCTIONS",0
	   55 43 54 49 4F
	   4E 53 00

 000003DD 50 72 65 73 73	anyKey BYTE "Press any key to continue...",0			;used for sysPause function similar to system("pause") in c++
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 00
 000003FA 20 31 20 20 20	colNumbers BYTE " 1   2   3   4   5   6   7",0
	   32 20 20 20 33
	   20 20 20 34 20
	   20 20 35 20 20
	   20 36 20 20 20
	   37 00

 00000415  0000002A [		board DWORD 42 DUP (?)	;allocates space for a 6x7 board	;array for board
	    00000000
	   ]
 000004BD 00000000		i DWORD 0							;used for display board function to keep track of the outside loop
 000004C1 00000020		blank DWORD " ",0						;blank space for display board
	   00000000
 000004C9 01			inarow BYTE 1							;keep track of the number of tiles in a row for check function
 000004CA 00			col BYTE ?							;separate col variable for check function
 000004CB 00			row BYTE ?							;separate row variable for check function
 000004CC 00000007		seven DWORD 7							;used for mul when accessing array
 000004D0 00000004		four DWORD 4							;used for mul when accessing array
 000004D4 00000000		validPlace DWORD ?						;used in place tile to ensure validity of column

 000004D8 00000000		colChoice DWORD 0						;users column choice for placing tile
 000004DC 00000000		curCol DWORD 0							;current column the program is on
 000004E0 00000000		placed DWORD 0							;keeps track of number of tiles places and when places == 42 game board is full
 000004E4 2C 20 77 68 65	tileDropPrompt BYTE ", where would you like to drop your tile? (Choose columns 1 - 7)",0	;prompt to see where user wants to drop tilw
	   72 65 20 77 6F
	   75 6C 64 20 79
	   6F 75 20 6C 69
	   6B 65 20 74 6F
	   20 64 72 6F 70
	   20 79 6F 75 72
	   20 74 69 6C 65
	   3F 20 28 43 68
	   6F 6F 73 65 20
	   63 6F 6C 75 6D
	   6E 73 20 31 20
	   2D 20 37 29 00
 00000525 43 6F 6C 75 6D	invalidCol BYTE "Column is full, please choose a different column"		;full column prompt
	   6E 20 69 73 20
	   66 75 6C 6C 2C
	   20 70 6C 65 61
	   73 65 20 63 68
	   6F 6F 73 65 20
	   61 20 64 69 66
	   66 65 72 65 6E
	   74 20 63 6F 6C
	   75 6D 6E
 00000555 50 6C 65 61 73	invalidB BYTE "Please enter a value between 1 and 7: "				;if colChoice is not between 1 and 7, try again
	   65 20 65 6E 74
	   65 72 20 61 20
	   76 61 6C 75 65
	   20 62 65 74 77
	   65 65 6E 20 31
	   20 61 6E 64 20
	   37 3A 20

 0000057B 30			win BYTE 48				;win is going to be a kind of boolean set to either 1 or 0 in ascii
 0000057C 00000040		player DWORD 40h			;player 1 is 40h, player 2 is 23h
 00000580 20 77 6F 6E 21	winnerTxt BYTE " won!",0	;playerX won!
	   00
 00000586 49 74 27 73 20	drawTxt BYTE "It's a draw!",0	;its a tie!
	   61 20 64 72 61
	   77 21 00

 00000593 20 73 63 6F 72	scorePrompt BYTE " score is ",0		;display player score
	   65 20 69 73 20
	   00
 0000059E 00000000		p1Score DWORD 0		;holds scores of player 1
 000005A2 00000000		p2Score DWORD 0		;holds scores of player 2
 000005A6 31			againUser BYTE 49	;againUser is a aboolean that is either 1 or 0 in ascii
 000005A7 57 6F 75 6C 64	playAgain BYTE "Would you like to play again? Enter 1 for yes and 0 for no: ",0		;again? prompt
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 3F 20
	   45 6E 74 65 72
	   20 31 20 66 6F
	   72 20 79 65 73
	   20 61 6E 64 20
	   30 20 66 6F 72
	   20 6E 6F 3A 20
	   00
 000005E4 54 68 61 6E 6B	endGameMsg BYTE "Thank you for playing connect four, come back soon!",0			;thanks for coming prompt
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 63 6F 6E
	   6E 65 63 74 20
	   66 6F 75 72 2C
	   20 63 6F 6D 65
	   20 62 61 63 6B
	   20 73 6F 6F 6E
	   21 00

				;-------------------------------MAIN FUNCTION-------------------------------------
				;executes at runtime
 00000000			.code
 00000000			main proc
 00000000  E8 00000083			call askName				;ask users names at beginning and then not again while program is running

 00000005			BeginGame:
 00000005  E8 000000C1			call mainMenu				;display main menu

 0000000A  80 3D 000002BC R		cmp MM, 49					;if MM == 1 play the game
	   31
 00000011  74 35				je Play
 00000013  80 3D 000002BC R		cmp	MM, 52					;if MM == 4 end the game
	   34
 0000001A  74 4E				je EndGame	
 0000001C  80 3D 000002BC R		cmp MM, 50					;if MM == 2 give instructions and jmp to beginning 
	   32
 00000023  75 07				jne Next
 00000025  E8 00000111				call instructions
 0000002A  EB D9				jmp BeginGame
 0000002C				Next:
 0000002C  80 3D 000002BC R		cmp MM, 51					;if MM == 3 display stats and jmp to beginning 
	   33
 00000033  75 07				jne Next1
 00000035  E8 00000133				call displayStats
 0000003A  EB C9				jmp BeginGame
 0000003C				Next1:
 0000003C  BA 0000032D R			mov edx, offset MMinvalid		;if none of the above are called, then display invalidMM and jmp to beginning 
 00000041  E8 00000000 E			call WriteString
 00000046  EB BD			jmp BeginGame				
					

 00000048			Play:
 00000048  E8 00000175			call playGame
					
 0000004D  B8 0000000F			mov eax, white+(black*16)			;reset screen colors to out of game mode
 00000052  E8 00000000 E		call settextcolor
 00000057  E8 00000000 E		call Clrscr

 0000005C  E8 00000857			call again						;sees if the user wants to play again
 00000061  80 3D 000005A6 R		cmp againUser, 49
	   31
 00000068  74 9B			je BeginGame					;if yes, start the game over, if no then continue and thank the user for playing
 0000006A			EndGame:
 0000006A  E8 00000000 E		call Clrscr
 0000006F  BA 000005E4 R		mov edx, offset endGameMsg		;ends program and thanks user for playing
 00000074  E8 00000000 E		call WriteString
 00000079  E8 00000000 E		call Crlf
 0000007E  E8 00000850			call sysPause
					
 00000083  E8 00000000 E		call exitProcess
 00000088			main endp

				;---------------------------------FUNCTION TO ASK USER NAME-----------------------------------
				;function executes at runtime
 00000088			askName PROC USES EAX EDX ECX
 00000088  50		   *	    push   eax
 00000089  52		   *	    push   edx
 0000008A  51		   *	    push   ecx
 0000008B  BA 00000000 R		mov edx, offset p1Prompt		;asks P1 name
 00000090  E8 00000000 E		call WriteString
 00000095  B9 00000050			mov ecx, 80
 0000009A  BA 0000003C R		mov edx, offset p1Name			;reads P1 name
 0000009F  E8 00000000 E		call ReadString
 000000A4  E8 00000000 E		call Crlf

 000000A9  BA 0000001E R		mov edx, offset p2Prompt		;asks P2 name
 000000AE  E8 00000000 E		call Writestring
 000000B3  B9 00000050			mov ecx, 80
 000000B8  BA 0000017C R		mov edx, offset p2Name			;reads P2 name
 000000BD  E8 00000000 E		call ReadString
 000000C2  E8 00000000 E		call Clrscr

					ret
 000000C7  59		   *	    pop    ecx
 000000C8  5A		   *	    pop    edx
 000000C9  58		   *	    pop    eax
 000000CA  C3		   *	    ret    00000h
 000000CB			askName endp

				;---------------------------------FUNCTION TO DISPLAY MAIN MENU-----------------------------------
				;function executes at runtime or when user enters a 2 or 3, and after every game if the user chooses to play again
 000000CB			mainMenu PROC USES EDX EAX
 000000CB  52		   *	    push   edx
 000000CC  50		   *	    push   eax
 000000CD  E8 00000000 E		call Clrscr
 000000D2  BA 000002BD R		mov edx, offset MMtitle			;title
 000000D7  E8 00000000 E		call WriteString
 000000DC  E8 00000000 E		call Crlf
 000000E1  BA 000002C7 R		mov edx, offset MMplay			;play
 000000E6  E8 00000000 E		call WriteString
 000000EB  E8 00000000 E		call Crlf
 000000F0  BA 000002D4 R		mov edx, offset MMinstructions		;instructions
 000000F5  E8 00000000 E		call WriteString
 000000FA  E8 00000000 E		call Crlf
 000000FF  BA 000002E4 R		mov edx, offset MMstats			;stats
 00000104  E8 00000000 E		call WriteString
 00000109  E8 00000000 E		call Crlf
 0000010E  BA 000002F1 R		mov edx, offset MMexit			;exit
 00000113  E8 00000000 E		call WriteString
 00000118  E8 00000000 E		call Crlf
 0000011D  E8 00000000 E		call Crlf
 00000122  BA 000002F9 R		mov edx, offset MMprompt		;prompt
 00000127  E8 00000000 E		call WriteString

 0000012C  33 C0			xor eax, eax
 0000012E  E8 00000000 E		call ReadChar
 00000133  A2 000002BC R		mov MM, al

					ret
 00000138  58		   *	    pop    eax
 00000139  5A		   *	    pop    edx
 0000013A  C3		   *	    ret    00000h
 0000013B			mainMenu endp

				;---------------------------------FUNCTION FOR INSTRUCTIONS-----------------------------------
				;user must enter a 2 in main menu function
 0000013B			instructions PROC USES EDX EAX
 0000013B  52		   *	    push   edx
 0000013C  50		   *	    push   eax
 0000013D  E8 00000000 E		call Clrscr
 00000142  BA 000003D0 R		mov edx, offset instructionsTitle		;display instruction title
 00000147  E8 00000000 E		call WriteString
 0000014C  E8 00000000 E		call Crlf
					
 00000151  BA 0000035C R		mov edx, offset instruct				;display instructions
 00000156  E8 00000000 E		call WriteString
 0000015B  E8 00000000 E		call Crlf
 00000160  E8 00000000 E		call Crlf
					
 00000165  E8 00000769			call sysPause

					ret
 0000016A  58		   *	    pop    eax
 0000016B  5A		   *	    pop    edx
 0000016C  C3		   *	    ret    00000h
 0000016D			instructions endp

				;---------------------------------FUNCTION TO DISPLAY STATS-----------------------------------
				;user must enter 3 in main menu function
 0000016D			displayStats PROC USES EDX EAX	
 0000016D  52		   *	    push   edx
 0000016E  50		   *	    push   eax
 0000016F  E8 00000000 E		call Clrscr

 00000174  BA 0000003C R		mov edx, offset p1Name			;name of player --> scorePrompt --> score
 00000179  E8 00000000 E		call WriteString
 0000017E  BA 00000593 R		mov edx, offset scorePrompt
 00000183  E8 00000000 E		call WriteString
 00000188  A1 0000059E R		mov eax, p1Score
 0000018D  E8 00000000 E		call WriteInt
 00000192  E8 00000000 E		call Crlf

 00000197  BA 0000017C R		mov edx, offset p2Name
 0000019C  E8 00000000 E		call WriteString
 000001A1  BA 00000593 R		mov edx, offset scorePrompt
 000001A6  E8 00000000 E		call WriteString
 000001AB  A1 000005A2 R		mov eax, p2Score
 000001B0  E8 00000000 E		call WriteInt
 000001B5  E8 00000000 E		call Crlf

 000001BA  E8 00000714			call sysPause

				    ret
 000001BF  58		   *	    pop    eax
 000001C0  5A		   *	    pop    edx
 000001C1  C3		   *	    ret    00000h
 000001C2			displayStats endp

				;---------------------------------FUNCTION TO PLAY GAME-----------------------------------
				;user must enter 1 in main menu function
 000001C2			playGame PROC USES EDX EAX
 000001C2  52		   *	    push   edx
 000001C3  50		   *	    push   eax
 000001C4  C7 05 000004E0 R		mov placed, 0
	   00000000
 000001CE  C6 05 0000057B R		mov win, 48
	   30
 000001D5  E8 000000DE			call emptyBoard
 000001DA  E8 000000FA			call displayBoard
 000001DF			Game:
 000001DF  83 3D 000004DC R		cmp curCol, -1
	   FF
 000001E6  74 47			je ChooseRow
 000001E8  83 3D 0000057C R			cmp player, 40h
	   40
 000001EF  75 20				jne elseP2
 000001F1  BA 0000003C R				mov edx, offset p1Name
 000001F6  E8 00000000 E				call WriteString
 000001FB  BA 000004E4 R				mov edx, offset tileDropPrompt
 00000200  E8 00000000 E				call WriteString
 00000205  C7 05 0000057C R				mov player, 23h
	   00000023
 0000020F  EB 1E					jmp ChooseRow
 00000211					elseP2:
 00000211  BA 0000017C R				mov edx, offset p2Name
 00000216  E8 00000000 E				call WriteString
 0000021B  BA 000004E4 R				mov edx, offset tileDropPrompt
 00000220  E8 00000000 E				call WriteString
 00000225  C7 05 0000057C R				mov player, 40h
	   00000040
 0000022F				ChooseRow:
 0000022F  83 3D 000004E0 R			cmp placed, 42		;if board is full then game over
	   2A
 00000236  74 25				je Place
 00000238  E8 00000000 E				call ReadInt	;otherwise read in char from user
 0000023D  A3 000004D8 R				mov colChoice, eax	
 00000242  FF 0D 000004D8 R				dec colChoice
 00000248  83 3D 000004D8 R				cmp colChoice, 7	;ensure row choice is valid
	   07
 0000024F  72 0C					jb Place
 00000251  BA 00000555 R					mov edx, offset invalidB
 00000256  E8 00000000 E					call WriteString
 0000025B  EB D2			jmp ChooseRow		;while (true)
 0000025D				Place:
 0000025D  83 3D 000004E0 R		cmp placed, 42		;if the board is full game over
	   2A
 00000264  74 40				je GameOver
 00000266  E8 00000142			call placeTile		;otherwise call placeTile to set curCol
 0000026B  83 3D 000004DC R		cmp curCol, -1
	   FF
 00000272  75 0C				jne checkWin		;if curCol is -1 then the column is full
 00000274  BA 00000525 R			mov edx, offset invalidCol
 00000279  E8 00000000 E			call WriteString
 0000027E  EB AF				jmp ChooseRow
 00000280				checkWin:				;otherwise check for a win
 00000280  83 3D 000004E0 R			cmp placed, 6
	   06
 00000287  72 05				jb Enough
 00000289  E8 000001C7					call check		;check for a win and change the value of win if someone won to exit loop
 0000028E					Enough:
 0000028E  FF 05 000004E0 R			inc placed
 00000294  E8 00000040				call displayBoard
 00000299  80 3D 0000057B R	cmp win, 48
	   30
 000002A0  0F 84 FFFFFF39	je Game						

 000002A6			GameOver:
 000002A6  E8 000005A7			call updateStats			;announces winner and updates scores
 000002AB  E8 00000000 E		call crlf
 000002B0  E8 0000061E			call sysPause				;system("Pause")

					ret
 000002B5  58		   *	    pop    eax
 000002B6  5A		   *	    pop    edx
 000002B7  C3		   *	    ret    00000h
 000002B8			playGame endp

				;-------------------------------FUNCTION TO EMPTY BOARD-------------------------------------
				;empty at begining of game only before anyone places a tile
 000002B8			emptyBoard PROC USES ECX EAX EBX ESI					
 000002B8  51		   *	    push   ecx
 000002B9  50		   *	    push   eax
 000002BA  53		   *	    push   ebx
 000002BB  56		   *	    push   esi
 000002BC  BE 00000415 R		mov esi, offset board
 000002C1  8B 1D 000004C1 R		mov ebx, blank
 000002C7  33 C0			xor eax, eax
 000002C9  B9 0000002A		   	mov ecx, 42
 000002CE			    Loop1:
 000002CE  89 1C 86				mov [esi + eax * 4], ebx
 000002D1  40					inc eax
 000002D2  E2 FA			loop Loop1

					ret
 000002D4  5E		   *	    pop    esi
 000002D5  5B		   *	    pop    ebx
 000002D6  58		   *	    pop    eax
 000002D7  59		   *	    pop    ecx
 000002D8  C3		   *	    ret    00000h
 000002D9			emptyBoard endp

				;---------------------------------FUNCTION TO DISPLAY BOARD----------------------------------- 
				;display board at beginning and end of game and any time a change is made to the state of the baord (e.g. player drops a tile)
 000002D9			displayBoard PROC USES EAX ECX
 000002D9  50		   *	    push   eax
 000002DA  51		   *	    push   ecx
 000002DB  B8 0000001F			mov eax, white+(blue*16)
 000002E0  E8 00000000 E		call settextcolor
 000002E5  E8 00000000 E		call Clrscr
					
 000002EA  C7 05 000004BD R		mov i, 0
	   00000000
 000002F4  B9 00000006			mov ecx, 6
 000002F9				Loop4:
 000002F9  E8 00000014				call setRow
 000002FE  E2 F9			loop Loop4 
 00000300  BA 000003FA R		mov edx, offset colNumbers
 00000305  E8 00000000 E		call Writestring
 0000030A  E8 00000000 E		call crlf
					ret
 0000030F  59		   *	    pop    ecx
 00000310  58		   *	    pop    eax
 00000311  C3		   *	    ret    00000h
 00000312			displayBoard endp

				;-------------------------------FUNCTION TO CREATE A ROW OF THE BOARD-------------------------------------
				;called everytime display board is called
 00000312			setRow PROC USES EAX ECX ESI           ;outputs a row of boxes using ascii characters
 00000312  50		   *	    push   eax
 00000313  51		   *	    push   ecx
 00000314  56		   *	    push   esi
 00000315  B9 00000007			mov ecx, 7
 0000031A				Loop1:                                          ;ouputs first third of a row of 7 boxes
 0000031A  B0 DA				mov al, 218
 0000031C  E8 00000000 E			call Writechar
 00000321  B0 C4				mov al, 196
 00000323  E8 00000000 E			call Writechar
 00000328  B0 BF				mov al, 191
 0000032A  E8 00000000 E			call Writechar
 0000032F  A0 000004C1 R			mov al, BYTE PTR blank
 00000334  E8 00000000 E			call Writechar
 00000339  E2 DF			loop Loop1
 0000033B  E8 00000000 E		call crlf
				 
 00000340  B9 00000007			mov ecx, 7
 00000345				Loop2:                                          ;ouputs second third of a row of 7 boxes
 00000345  B0 B3				mov al, 179
 00000347  E8 00000000 E			call Writechar
 0000034C  33 C0				xor eax, eax
 0000034E  8B 35 000004BD R			mov esi, i
 00000354  8B 04 B5				mov eax, board[esi * TYPE board]						
	   00000415 R
 0000035B  E8 00000000 E			call Writechar
 00000360  FF 05 000004BD R			inc i
 00000366  B0 B3				mov al, 179
 00000368  E8 00000000 E			call Writechar
 0000036D  A0 000004C1 R			mov al, BYTE PTR blank
 00000372  E8 00000000 E			call Writechar
 00000377  E2 CC			loop Loop2
 00000379  E8 00000000 E		call crlf
				 
 0000037E  B9 00000007			mov ecx, 7
 00000383				Loop3:                                          ;ouputs last third of a row of 7 boxes
 00000383  B0 C0				mov al, 192
 00000385  E8 00000000 E			call Writechar
 0000038A  B0 C4				mov al, 196
 0000038C  E8 00000000 E			call Writechar
 00000391  B0 D9				mov al, 217
 00000393  E8 00000000 E			call Writechar
 00000398  A0 000004C1 R			mov al, BYTE PTR blank
 0000039D  E8 00000000 E			call Writechar
 000003A2  E2 DF			loop Loop3
 000003A4  E8 00000000 E		call crlf
					ret
 000003A9  5E		   *	    pop    esi
 000003AA  59		   *	    pop    ecx
 000003AB  58		   *	    pop    eax
 000003AC  C3		   *	    ret    00000h
 000003AD			setRow endp

				;--------------------------------FUNCTION TO PLACE TILE------------------------------------
				;placce tile is called when the user choses a column IF placed != 42 and IF colChoice is valid (between 0 and 7)
 000003AD			placeTile PROC USES EAX EBX ECX EDX ESI
 000003AD  50		   *	    push   eax
 000003AE  53		   *	    push   ebx
 000003AF  51		   *	    push   ecx
 000003B0  52		   *	    push   edx
 000003B1  56		   *	    push   esi
 000003B2  C7 05 000004D4 R		mov validPlace, 0
	   00000000
 000003BC  A1 000004D8 R		mov eax, colChoice
					.IF board[eax * TYPE board] == " "
 000003C1  83 3C 85
	   00000415 R 20   *	    cmp    board + [eax * type board], ' '
 000003C9  75 7A	   *	    jne    @C0001
						.WHILE validPlace < 6
 000003CB  EB 27	   *	    jmp    @C0003
 000003CD		   *@C0004:
 000003CD  33 C0					xor eax, eax
 000003CF  A1 000004D4 R				mov eax, validPlace
 000003D4  F7 25 000004CC R				mul seven
 000003DA  03 05 000004D8 R				add eax, colChoice
							.IF board[eax * TYPE board] == " "			
 000003E0  83 3C 85
	   00000415 R 20   *	    cmp    board + [eax * type board], ' '
 000003E8  75 08	   *	    jne    @C0005
 000003EA  FF 05 000004D4 R					inc validPlace
							.ELSE
 000003F0  EB 02	   *	    jmp    @C0007
 000003F2		   *@C0005:
 000003F2  EB 18						jmp downAndOut
							.ENDIF
						.ENDW	
 000003F4		   *@C0007:
 000003F4		   *@C0003:
 000003F4  83 3D 000004D4 R
	   06		   *	    cmp    validPlace, 006h
 000003FB  72 D0	   *	    jb	@C0004
						
						.IF validPlace == 5
 000003FD  83 3D 000004D4 R
	   05		   *	    cmp    validPlace, 005h
 00000404  75 06	   *	    jne    @C0009
 00000406  FF 05 000004D4 R				inc validPlace
						.ENDIF
					
 0000040C				downAndOut:	
 0000040C		   *@C0009:
 0000040C  FF 0D 000004D4 R			dec validPlace
 00000412  33 C0				xor eax, eax
 00000414  A1 000004D4 R			mov eax, validPlace
 00000419  F7 25 000004CC R			mul seven
 0000041F  03 05 000004D8 R			add eax, colChoice
 00000425  8B 1D 0000057C R			mov ebx, player
 0000042B  BE 00000415 R			mov esi, offset board
 00000430  89 1C 86				mov [esi + eax * TYPE board], ebx
 00000433  8B 15 000004D4 R			mov edx, validPlace
 00000439  89 15 000004DC R			mov curCol, edx
						ret
 0000043F  5E		   *	    pop    esi
 00000440  5A		   *	    pop    edx
 00000441  59		   *	    pop    ecx
 00000442  5B		   *	    pop    ebx
 00000443  58		   *	    pop    eax
 00000444  C3		   *	    ret    00000h
							
					.ENDIF
 00000445		   *@C0001:
 00000445  C7 05 000004DC R		mov curCol, -1
	   FFFFFFFF
					ret
 0000044F  5E		   *	    pop    esi
 00000450  5A		   *	    pop    edx
 00000451  59		   *	    pop    ecx
 00000452  5B		   *	    pop    ebx
 00000453  58		   *	    pop    eax
 00000454  C3		   *	    ret    00000h
 00000455			placeTile endp

				;---------------------------------FUNCTION TO CHECK FOR A WINNER-----------------------------------
				;once placed > 6 everytime a tile is placed the function is called as long as placed != 42 and curCol != -1 (meaning the curCol is full)
 00000455			check PROC USES EAX EBX EDX
 00000455  50		   *	    push   eax
 00000456  53		   *	    push   ebx
 00000457  52		   *	    push   edx
 00000458  A0 000004D8 R		mov al, BYTE PTR colChoice
 0000045D  A2 000004CA R		mov col, al
 00000462  A0 000004DC R		mov al, BYTE PTR curCol
 00000467  A2 000004CB R		mov row, al

					;check horizontal
					;go left
					.WHILE col > 0
 0000046C  EB 52	   *	    jmp    @C000B
 0000046E		   *@C000C:
 0000046E  0F B6 05				movzx eax,row
	   000004CB R
 00000475  F7 25 000004CC R			mul seven
 0000047B  FE 0D 000004CA R			dec col
 00000481  02 05 000004CA R			add al,col
 00000487  FE 05 000004CA R			inc col
 0000048D  8B 14 85				mov edx, board[eax * 4]
	   00000415 R
						.IF player == edx
 00000494  39 15 0000057C R *	    cmp    player, edx
 0000049A  75 1C	   *	    jne    @C000D
 0000049C  FE 05 000004C9 R				inc inarow
							.IF inarow == 4
 000004A2  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 000004A9  75 0F	   *	    jne    @C000F
 000004AB  C6 05 0000057B R					mov win,49
	   31
								ret
 000004B2  5A		   *	    pop    edx
 000004B3  5B		   *	    pop    ebx
 000004B4  58		   *	    pop    eax
 000004B5  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 000004B6  EB 02	   *	    jmp    @C0011
 000004B8		   *@C000D:
 000004B8  EB 0F					jmp next1
						.ENDIF
 000004BA		   *@C0011:
 000004BA		   *@C000F:
 000004BA  FE 0D 000004CA R			dec col
					.ENDW
 000004C0		   *@C000B:
 000004C0  80 3D 000004CA R
	   00		   *	    cmp    col, 000h
 000004C7  77 A5	   *	    ja	@C000C
 000004C9				next1:
 000004C9  A0 000004D8 R		mov al, BYTE PTR colChoice
 000004CE  A2 000004CA R		mov col,al

					;go right
					.WHILE col < 6
 000004D3  EB 4C	   *	    jmp    @C0013
 000004D5		   *@C0014:
 000004D5  0F B6 05				movzx eax,row
	   000004CB R
 000004DC  F7 25 000004CC R			mul seven
 000004E2  FE 05 000004CA R			inc col
 000004E8  02 05 000004CA R			add al,col
 000004EE  8B 14 85				mov edx, board[eax * 4]
	   00000415 R
						.IF player == edx
 000004F5  39 15 0000057C R *	    cmp    player, edx
 000004FB  75 1C	   *	    jne    @C0015
 000004FD  FE 05 000004C9 R				inc inarow
							.IF inarow == 4
 00000503  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 0000050A  75 0F	   *	    jne    @C0017
 0000050C  C6 05 0000057B R					mov win,49
	   31
								ret
 00000513  5A		   *	    pop    edx
 00000514  5B		   *	    pop    ebx
 00000515  58		   *	    pop    eax
 00000516  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 00000517  EB 02	   *	    jmp    @C0019
 00000519		   *@C0015:
 00000519  EB 0F					jmp next2
						.ENDIF
 0000051B		   *@C0019:
 0000051B		   *@C0017:
 0000051B  FE 05 000004CA R			inc col
					.ENDW
 00000521		   *@C0013:
 00000521  80 3D 000004CA R
	   06		   *	    cmp    col, 006h
 00000528  72 AB	   *	    jb	@C0014
 0000052A				next2:
 0000052A  C6 05 000004C9 R		mov inarow,1
	   01
 00000531  A0 000004D8 R		mov al, BYTE PTR colChoice
 00000536  A2 000004CA R		mov col,al

					;check vertical
					;go up
					.WHILE row > 0
 0000053B  EB 52	   *	    jmp    @C001B
 0000053D		   *@C001C:
 0000053D  FE 0D 000004CB R			dec row
 00000543  0F B6 05				movzx eax,row
	   000004CB R
 0000054A  FE 05 000004CB R			inc row
 00000550  F7 25 000004CC R			mul seven
 00000556  02 05 000004CA R			add al,col
 0000055C  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 00000563  39 15 0000057C R *	    cmp    player, edx
 00000569  75 1C	   *	    jne    @C001D
 0000056B  FE 05 000004C9 R				inc inarow
							.IF inarow == 4
 00000571  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 00000578  75 0F	   *	    jne    @C001F
 0000057A  C6 05 0000057B R					mov win,49
	   31
								ret
 00000581  5A		   *	    pop    edx
 00000582  5B		   *	    pop    ebx
 00000583  58		   *	    pop    eax
 00000584  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 00000585  EB 02	   *	    jmp    @C0021
 00000587		   *@C001D:
 00000587  EB 0F					jmp next3
						.ENDIF
 00000589		   *@C0021:
 00000589		   *@C001F:
 00000589  FE 0D 000004CB R			dec row
					.ENDW
 0000058F		   *@C001B:
 0000058F  80 3D 000004CB R
	   00		   *	    cmp    row, 000h
 00000596  77 A5	   *	    ja	@C001C
 00000598				next3:
 00000598  A0 000004DC R		mov al, BYTE PTR curCol
 0000059D  A2 000004CB R		mov row,al

					;go down
					.WHILE row < 5
 000005A2  EB 52	   *	    jmp    @C0023
 000005A4		   *@C0024:
 000005A4  FE 05 000004CB R			inc row
 000005AA  0F B6 05				movzx eax,row
	   000004CB R
 000005B1  FE 0D 000004CB R			dec row
 000005B7  F7 25 000004CC R			mul seven
 000005BD  02 05 000004CA R			add al,col
 000005C3  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 000005CA  39 15 0000057C R *	    cmp    player, edx
 000005D0  75 1C	   *	    jne    @C0025
 000005D2  FE 05 000004C9 R				inc inarow
							.IF inarow ==4
 000005D8  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 000005DF  75 0F	   *	    jne    @C0027
 000005E1  C6 05 0000057B R					mov win,49
	   31
								ret
 000005E8  5A		   *	    pop    edx
 000005E9  5B		   *	    pop    ebx
 000005EA  58		   *	    pop    eax
 000005EB  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 000005EC  EB 02	   *	    jmp    @C0029
 000005EE		   *@C0025:
 000005EE  EB 0F					jmp next4
						.ENDIF
 000005F0		   *@C0029:
 000005F0		   *@C0027:
 000005F0  FE 05 000004CB R			inc row
					.ENDW
 000005F6		   *@C0023:
 000005F6  80 3D 000004CB R
	   05		   *	    cmp    row, 005h
 000005FD  72 A5	   *	    jb	@C0024
 000005FF				next4:
 000005FF  C6 05 000004C9 R		mov inarow,1
	   01
 00000606  A0 000004DC R		mov al, BYTE PTR curCol
 0000060B  A2 000004CB R		mov row,al

					;check diagonally (/)
					;go up-right
					.WHILE col < 6 && row >0
 00000610  EB 64	   *	    jmp    @C002B
 00000612		   *@C002C:
 00000612  FE 0D 000004CB R			dec row
 00000618  0F B6 05				movzx eax,row
	   000004CB R
 0000061F  FE 05 000004CB R			inc row
 00000625  F7 25 000004CC R			mul seven
 0000062B  FE 05 000004CA R			inc col
 00000631  02 05 000004CA R			add al,col
 00000637  FE 0D 000004CA R			dec col
 0000063D  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 00000644  39 15 0000057C R *	    cmp    player, edx
 0000064A  75 1C	   *	    jne    @C002D
 0000064C  FE 05 000004C9 R				inc inarow
							.IF inarow == 4
 00000652  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 00000659  75 0F	   *	    jne    @C002F
 0000065B  C6 05 0000057B R					mov win,49
	   31
								ret
 00000662  5A		   *	    pop    edx
 00000663  5B		   *	    pop    ebx
 00000664  58		   *	    pop    eax
 00000665  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 00000666  EB 02	   *	    jmp    @C0031
 00000668		   *@C002D:
 00000668  EB 1E					jmp next5
						.ENDIF
 0000066A		   *@C0031:
 0000066A		   *@C002F:
 0000066A  FE 0D 000004CB R			dec row
 00000670  FE 05 000004CA R			inc col
					.ENDW
 00000676		   *@C002B:
 00000676  80 3D 000004CA R
	   06		   *	    cmp    col, 006h
 0000067D  73 09	   *	    jae    @C0032
 0000067F  80 3D 000004CB R
	   00		   *	    cmp    row, 000h
 00000686  77 8A	   *	    ja	@C002C
 00000688		   *@C0032:
 00000688				next5:
 00000688  A0 000004DC R		mov al, BYTE PTR curCol
 0000068D  A2 000004CB R		mov row,al
 00000692  A0 000004D8 R		mov al,BYTE PTR colChoice
 00000697  A2 000004CA R		mov col,al

					;go down-left
					.WHILE col > 0 && row < 5
 0000069C  EB 64	   *	    jmp    @C0034
 0000069E		   *@C0035:
 0000069E  FE 05 000004CB R			inc row
 000006A4  0F B6 05				movzx eax,row
	   000004CB R
 000006AB  FE 0D 000004CB R			dec row
 000006B1  F7 25 000004CC R			mul seven
 000006B7  FE 0D 000004CA R			dec col
 000006BD  02 05 000004CA R			add al,col
 000006C3  FE 05 000004CA R			inc col
 000006C9  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 000006D0  39 15 0000057C R *	    cmp    player, edx
 000006D6  75 1C	   *	    jne    @C0036
 000006D8  FE 05 000004C9 R				inc inarow
							.IF inarow ==4
 000006DE  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 000006E5  75 0F	   *	    jne    @C0038
 000006E7  C6 05 0000057B R					mov win,49
	   31
								ret
 000006EE  5A		   *	    pop    edx
 000006EF  5B		   *	    pop    ebx
 000006F0  58		   *	    pop    eax
 000006F1  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 000006F2  EB 02	   *	    jmp    @C003A
 000006F4		   *@C0036:
 000006F4  EB 1E					jmp next6
						.ENDIF
 000006F6		   *@C003A:
 000006F6		   *@C0038:
 000006F6  FE 05 000004CB R			inc row
 000006FC  FE 0D 000004CA R			dec col
					.ENDW
 00000702		   *@C0034:
 00000702  80 3D 000004CA R
	   00		   *	    cmp    col, 000h
 00000709  76 09	   *	    jbe    @C003B
 0000070B  80 3D 000004CB R
	   05		   *	    cmp    row, 005h
 00000712  72 8A	   *	    jb	@C0035
 00000714		   *@C003B:
 00000714				next6:
 00000714  C6 05 000004C9 R		mov inarow,1
	   01
 0000071B  A0 000004DC R		mov al, BYTE PTR curCol
 00000720  A2 000004CB R		mov row,al
 00000725  A0 000004D8 R		mov al, BYTE PTR colChoice
 0000072A  A2 000004CA R		mov col,al

					;check diagonally (\)
					;go up-left
					.WHILE col > 0 && row > 0
 0000072F  EB 64	   *	    jmp    @C003D
 00000731		   *@C003E:
 00000731  FE 0D 000004CB R			dec row
 00000737  0F B6 05				movzx eax,row
	   000004CB R
 0000073E  FE 05 000004CB R			inc row
 00000744  F7 25 000004CC R			mul seven
 0000074A  FE 0D 000004CA R			dec col
 00000750  02 05 000004CA R			add al,col
 00000756  FE 05 000004CA R			inc col
 0000075C  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 00000763  39 15 0000057C R *	    cmp    player, edx
 00000769  75 1C	   *	    jne    @C003F
 0000076B  FE 05 000004C9 R				inc inarow
							.IF inarow ==4
 00000771  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 00000778  75 0F	   *	    jne    @C0041
 0000077A  C6 05 0000057B R					mov win,49
	   31
								ret
 00000781  5A		   *	    pop    edx
 00000782  5B		   *	    pop    ebx
 00000783  58		   *	    pop    eax
 00000784  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 00000785  EB 02	   *	    jmp    @C0043
 00000787		   *@C003F:
 00000787  EB 1E					jmp next7
						.ENDIF
 00000789		   *@C0043:
 00000789		   *@C0041:
 00000789  FE 0D 000004CB R			dec row
 0000078F  FE 0D 000004CA R			dec col
					.ENDW
 00000795		   *@C003D:
 00000795  80 3D 000004CA R
	   00		   *	    cmp    col, 000h
 0000079C  76 09	   *	    jbe    @C0044
 0000079E  80 3D 000004CB R
	   00		   *	    cmp    row, 000h
 000007A5  77 8A	   *	    ja	@C003E
 000007A7		   *@C0044:
 000007A7				next7:
 000007A7  A0 000004DC R		mov al, BYTE PTR curCol
 000007AC  A2 000004CB R		mov row,al
 000007B1  A0 000004D8 R		mov al, BYTE PTR colChoice
 000007B6  A2 000004CA R		mov col,al

					;go down-right
					.WHILE col < 6 && row < 5
 000007BB  EB 64	   *	    jmp    @C0046
 000007BD		   *@C0047:
 000007BD  FE 05 000004CB R			inc row
 000007C3  0F B6 05				movzx eax,row
	   000004CB R
 000007CA  FE 0D 000004CB R			dec row
 000007D0  F7 25 000004CC R			mul seven
 000007D6  FE 05 000004CA R			inc col
 000007DC  02 05 000004CA R			add al,col
 000007E2  FE 0D 000004CA R			dec col
 000007E8  8B 14 85				mov edx,board[eax * 4]
	   00000415 R
						.IF player == edx
 000007EF  39 15 0000057C R *	    cmp    player, edx
 000007F5  75 1C	   *	    jne    @C0048
 000007F7  FE 05 000004C9 R				inc inarow
							.IF inarow ==4
 000007FD  80 3D 000004C9 R
	   04		   *	    cmp    inarow, 004h
 00000804  75 0F	   *	    jne    @C004A
 00000806  C6 05 0000057B R					mov win,49
	   31
								ret
 0000080D  5A		   *	    pop    edx
 0000080E  5B		   *	    pop    ebx
 0000080F  58		   *	    pop    eax
 00000810  C3		   *	    ret    00000h
							.ENDIF
						.ELSE
 00000811  EB 02	   *	    jmp    @C004C
 00000813		   *@C0048:
 00000813  EB 1E					jmp next8
						.ENDIF
 00000815		   *@C004C:
 00000815		   *@C004A:
 00000815  FE 05 000004CB R			inc row
 0000081B  FE 05 000004CA R			inc col
					.ENDW
 00000821		   *@C0046:
 00000821  80 3D 000004CA R
	   06		   *	    cmp    col, 006h
 00000828  73 09	   *	    jae    @C004D
 0000082A  80 3D 000004CB R
	   05		   *	    cmp    row, 005h
 00000831  72 8A	   *	    jb	@C0047
 00000833		   *@C004D:
 00000833				next8:
 00000833  C6 05 000004C9 R		mov inarow,1
	   01
 0000083A  A0 000004DC R		mov al, BYTE PTR curCol
 0000083F  A2 000004CB R		mov row,al
 00000844  A0 000004D8 R		mov al, BYTE PTR colChoice
 00000849  A2 000004CA R		mov col,al
				    ret
 0000084E  5A		   *	    pop    edx
 0000084F  5B		   *	    pop    ebx
 00000850  58		   *	    pop    eax
 00000851  C3		   *	    ret    00000h
 00000852			check endp

				;---------------------------------FUNCTION TO UPDATE STATS-----------------------------------
				;called every time a game ends after the final board is displayed
 00000852			updateStats PROC USES EDX
 00000852  52		   *	    push   edx
 00000853  83 3D 000004E0 R		cmp placed, 42					;if the board is full then its a draw
	   2A
 0000085A  75 1B			jne Next
 0000085C  BA 00000586 R			mov edx, offset drawTxt		
 00000861  E8 00000000 E			call Writestring
 00000866  BA 000003DD R			mov edx, offset anyKey		;similar to system("pause") in c++
 0000086B  E8 00000000 E			call WriteString
 00000870  E8 00000000 E			call ReadChar
 00000875  EB 3F				jmp statEnd
 00000877			Next: 
 00000877  83 3D 0000057C R		cmp player, 40h			;if player == 40h then player 2 won
	   40
 0000087E  75 1C			jne IfElse
 00000880  BA 0000017C R			mov edx, offset p2Name
 00000885  E8 00000000 E			call WriteString
 0000088A  BA 00000580 R			mov edx, offset winnerTxt		
 0000088F  E8 00000000 E			call Writestring
 00000894  FF 05 000005A2 R			inc p2Score
 0000089A  EB 1A				jmp statEnd
 0000089C				IfElse:					;otherwise player 1 wins
 0000089C  BA 0000003C R			mov edx, offset p1Name
 000008A1  E8 00000000 E			call WriteString
 000008A6  BA 00000580 R			mov edx, offset winnerTxt		
 000008AB  E8 00000000 E			call Writestring
 000008B0  FF 05 0000059E R			inc p1Score
 000008B6			statEnd:
				    ret
 000008B6  5A		   *	    pop    edx
 000008B7  C3		   *	    ret    00000h
 000008B8			updateStats endp

				;---------------------------------FUNCTION TO ASK USER IF THEY WANT TO PLAY AGAIN-----------------------------------
				;called at the end of game once a winner is announced
 000008B8			again PROC USES EDX EAX
 000008B8  52		   *	    push   edx
 000008B9  50		   *	    push   eax
 000008BA  BA 000005A7 R		mov edx, offset playAgain
 000008BF  E8 00000000 E		call WriteString
 000008C4  33 C0			xor eax, eax
 000008C6  E8 00000000 E		call ReadChar
 000008CB  A2 000005A6 R		mov againUser, al

					ret
 000008D0  58		   *	    pop    eax
 000008D1  5A		   *	    pop    edx
 000008D2  C3		   *	    ret    00000h
 000008D3			again endp

				;---------------------------------FUNCTION THAT MIMICS SYSTEM("PAUSE") IN C++-----------------------------------
				;called at random points within the code, mostly when a message is the last thing to be displayed before clearing the screen or exiting the game 
 000008D3			sysPause PROC USES EDX
 000008D3  52		   *	    push   edx
 000008D4  BA 000003DD R		mov edx, offset anyKey		
 000008D9  E8 00000000 E		call WriteString
 000008DE  E8 00000000 E		call ReadChar

					ret
 000008E3  5A		   *	    pop    edx
 000008E4  C3		   *	    ret    00000h
 000008E5			sysPause endp
				end main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/12/16 22:08:21
Connect Four Assembler Cod				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000618 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
again  . . . . . . . . . . . . .	P Near	 000008B8 _TEXT	Length= 0000001B Public STDCALL
askName  . . . . . . . . . . . .	P Near	 00000088 _TEXT	Length= 00000043 Public STDCALL
check  . . . . . . . . . . . . .	P Near	 00000455 _TEXT	Length= 000003FD Public STDCALL
  next1  . . . . . . . . . . . .	L Near	 000004C9 _TEXT	
  next2  . . . . . . . . . . . .	L Near	 0000052A _TEXT	
  next3  . . . . . . . . . . . .	L Near	 00000598 _TEXT	
  next4  . . . . . . . . . . . .	L Near	 000005FF _TEXT	
  next5  . . . . . . . . . . . .	L Near	 00000688 _TEXT	
  next6  . . . . . . . . . . . .	L Near	 00000714 _TEXT	
  next7  . . . . . . . . . . . .	L Near	 000007A7 _TEXT	
  next8  . . . . . . . . . . . .	L Near	 00000833 _TEXT	
displayBoard . . . . . . . . . .	P Near	 000002D9 _TEXT	Length= 00000039 Public STDCALL
  Loop4  . . . . . . . . . . . .	L Near	 000002F9 _TEXT	
displayStats . . . . . . . . . .	P Near	 0000016D _TEXT	Length= 00000055 Public STDCALL
emptyBoard . . . . . . . . . . .	P Near	 000002B8 _TEXT	Length= 00000021 Public STDCALL
  Loop1  . . . . . . . . . . . .	L Near	 000002CE _TEXT	
instructions . . . . . . . . . .	P Near	 0000013B _TEXT	Length= 00000032 Public STDCALL
mainMenu . . . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 00000070 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000088 Public STDCALL
  BeginGame  . . . . . . . . . .	L Near	 00000005 _TEXT	
  Next . . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  Next1  . . . . . . . . . . . .	L Near	 0000003C _TEXT	
  Play . . . . . . . . . . . . .	L Near	 00000048 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 0000006A _TEXT	
placeTile  . . . . . . . . . . .	P Near	 000003AD _TEXT	Length= 000000A8 Public STDCALL
  downAndOut . . . . . . . . . .	L Near	 0000040C _TEXT	
playGame . . . . . . . . . . . .	P Near	 000001C2 _TEXT	Length= 000000F6 Public STDCALL
  Game . . . . . . . . . . . . .	L Near	 000001DF _TEXT	
  elseP2 . . . . . . . . . . . .	L Near	 00000211 _TEXT	
  ChooseRow  . . . . . . . . . .	L Near	 0000022F _TEXT	
  Place  . . . . . . . . . . . .	L Near	 0000025D _TEXT	
  checkWin . . . . . . . . . . .	L Near	 00000280 _TEXT	
  Enough . . . . . . . . . . . .	L Near	 0000028E _TEXT	
  GameOver . . . . . . . . . . .	L Near	 000002A6 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setRow . . . . . . . . . . . . .	P Near	 00000312 _TEXT	Length= 0000009B Public STDCALL
  Loop1  . . . . . . . . . . . .	L Near	 0000031A _TEXT	
  Loop2  . . . . . . . . . . . .	L Near	 00000345 _TEXT	
  Loop3  . . . . . . . . . . . .	L Near	 00000383 _TEXT	
sysPause . . . . . . . . . . . .	P Near	 000008D3 _TEXT	Length= 00000012 Public STDCALL
updateStats  . . . . . . . . . .	P Near	 00000852 _TEXT	Length= 00000066 Public STDCALL
  Next . . . . . . . . . . . . .	L Near	 00000877 _TEXT	
  IfElse . . . . . . . . . . . .	L Near	 0000089C _TEXT	
  statEnd  . . . . . . . . . . .	L Near	 000008B6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MMexit . . . . . . . . . . . . .	Byte	 000002F1 _DATA	
MMinstructions . . . . . . . . .	Byte	 000002D4 _DATA	
MMinvalid  . . . . . . . . . . .	Byte	 0000032D _DATA	
MMplay . . . . . . . . . . . . .	Byte	 000002C7 _DATA	
MMprompt . . . . . . . . . . . .	Byte	 000002F9 _DATA	
MMstats  . . . . . . . . . . . .	Byte	 000002E4 _DATA	
MMtitle  . . . . . . . . . . . .	Byte	 000002BD _DATA	
MM . . . . . . . . . . . . . . .	Byte	 000002BC _DATA	
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
againUser  . . . . . . . . . . .	Byte	 000005A6 _DATA	
anyKey . . . . . . . . . . . . .	Byte	 000003DD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	DWord	 000004C1 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
board  . . . . . . . . . . . . .	DWord	 00000415 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
colChoice  . . . . . . . . . . .	DWord	 000004D8 _DATA	
colNumbers . . . . . . . . . . .	Byte	 000003FA _DATA	
col  . . . . . . . . . . . . . .	Byte	 000004CA _DATA	
curCol . . . . . . . . . . . . .	DWord	 000004DC _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
drawTxt  . . . . . . . . . . . .	Byte	 00000586 _DATA	
endGameMsg . . . . . . . . . . .	Byte	 000005E4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
four . . . . . . . . . . . . . .	DWord	 000004D0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inarow . . . . . . . . . . . . .	Byte	 000004C9 _DATA	
instructionsTitle  . . . . . . .	Byte	 000003D0 _DATA	
instruct . . . . . . . . . . . .	Byte	 0000035C _DATA	
invalidB . . . . . . . . . . . .	Byte	 00000555 _DATA	
invalidCol . . . . . . . . . . .	Byte	 00000525 _DATA	
i  . . . . . . . . . . . . . . .	DWord	 000004BD _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
p1Name . . . . . . . . . . . . .	DWord	 0000003C _DATA	
p1Prompt . . . . . . . . . . . .	Byte	 00000000 _DATA	
p1Score  . . . . . . . . . . . .	DWord	 0000059E _DATA	
p2Name . . . . . . . . . . . . .	DWord	 0000017C _DATA	
p2Prompt . . . . . . . . . . . .	Byte	 0000001E _DATA	
p2Score  . . . . . . . . . . . .	DWord	 000005A2 _DATA	
placed . . . . . . . . . . . . .	DWord	 000004E0 _DATA	
playAgain  . . . . . . . . . . .	Byte	 000005A7 _DATA	
player . . . . . . . . . . . . .	DWord	 0000057C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 000004CB _DATA	
scorePrompt  . . . . . . . . . .	Byte	 00000593 _DATA	
seven  . . . . . . . . . . . . .	DWord	 000004CC _DATA	
tileDropPrompt . . . . . . . . .	Byte	 000004E4 _DATA	
validPlace . . . . . . . . . . .	DWord	 000004D4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winnerTxt  . . . . . . . . . . .	Byte	 00000580 _DATA	
win  . . . . . . . . . . . . . .	Byte	 0000057B _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
